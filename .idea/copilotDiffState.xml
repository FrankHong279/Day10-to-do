<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/App.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/App.js" />
              <option name="originalContent" value="import './App.css';&#10;import {createBrowserRouter, RouterProvider, useParams} from &quot;react-router&quot;;&#10;import {ErrorPage} from &quot;./pages/ErrorPage&quot;;&#10;import {HomePage} from &quot;./pages/HomePage&quot;;&#10;import {TodoContext} from &quot;./contexts/TodoContext&quot;;&#10;import {useContext, useReducer} from &quot;react&quot;;&#10;import {todoReducer} from &quot;./reducers/TodoReducer&quot;;&#10;import {TodoDetailPage} from &quot;./pages/TodoDetailPage&quot;;&#10;import {DefaultLayout} from &quot;./layouts/DefaultLayout&quot;;&#10;import {TodoItem} from &quot;./components/TodoItem&quot;;&#10;&#10;export const initState = [&#10;    {id: 1, text: &quot;the first todo&quot;, done: false},&#10;    {id: 2, text: &quot;the second todo&quot;, done: true},&#10;];&#10;&#10;function DoneListPage() {&#10;    const {state, dispatch} = useContext(TodoContext);&#10;    const todo = state.filter((todo) =&gt; todo.done === true);&#10;    return &lt;div&gt;&#10;        {todo.map((item, index) =&gt; &lt;TodoItem todo={item} key={item.id}/&gt;)}&#10;    &lt;/div&gt;&#10;}&#10;&#10;const routes = createBrowserRouter([&#10;    {&#10;        path: &quot;/&quot;,&#10;        element: &lt;DefaultLayout /&gt;,&#10;        errorElement: &lt;ErrorPage /&gt;,&#10;        children: [&#10;            {&#10;                path: &quot;/&quot;,&#10;                element: &lt;HomePage /&gt;&#10;            },&#10;            {&#10;                path: &quot;/todos/:id&quot;,&#10;                element: &lt;TodoDetailPage /&gt;&#10;            },&#10;            {&#10;                path: &quot;/doneList&quot;,&#10;                element: &lt;DoneListPage /&gt;&#10;            }&#10;        ]&#10;    }&#10;]);&#10;&#10;function App() {&#10;    const [state, dispatch] = useReducer(todoReducer, initState)&#10;    return (&#10;        &lt;div&gt;&#10;            &lt;TodoContext.Provider value={{state, dispatch}}&gt;&#10;                &lt;RouterProvider router={routes}/&gt;&#10;            &lt;/TodoContext.Provider&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;export default App;" />
              <option name="updatedContent" value="import './App.css';&#10;import {createBrowserRouter, RouterProvider, useParams} from &quot;react-router&quot;;&#10;import {ErrorPage} from &quot;./pages/ErrorPage&quot;;&#10;import {HomePage} from &quot;./pages/HomePage&quot;;&#10;import {TodoContext} from &quot;./contexts/TodoContext&quot;;&#10;import {useContext, useReducer} from &quot;react&quot;;&#10;import {todoReducer} from &quot;./reducers/TodoReducer&quot;;&#10;import {TodoDetailPage} from &quot;./pages/TodoDetailPage&quot;;&#10;import {DefaultLayout} from &quot;./layouts/DefaultLayout&quot;;&#10;import {TodoItem} from &quot;./components/TodoItem&quot;;&#10;&#10;export const initState = [&#10;    {id: 1, text: &quot;the first todo&quot;, done: false},&#10;    {id: 2, text: &quot;the second todo&quot;, done: true},&#10;];&#10;&#10;function DoneListPage() {&#10;    const {state, dispatch} = useContext(TodoContext);&#10;    const todo = state.filter((todo) =&gt; todo.done === true);&#10;    return &lt;div&gt;&#10;        {todo.map((item, index) =&gt; &lt;TodoItem todo={item} key={item.id}/&gt;)}&#10;    &lt;/div&gt;&#10;}&#10;&#10;const routes = createBrowserRouter([&#10;    {&#10;        path: &quot;/&quot;,&#10;        element: &lt;DefaultLayout /&gt;,&#10;        errorElement: &lt;ErrorPage /&gt;,&#10;        children: [&#10;            {&#10;                path: &quot;/&quot;,&#10;                element: &lt;HomePage /&gt;&#10;            },&#10;            {&#10;                path: &quot;/todos/:id&quot;,&#10;                element: &lt;TodoDetailPage /&gt;&#10;            },&#10;            {&#10;                path: &quot;/doneList&quot;,&#10;                element: &lt;DoneListPage /&gt;&#10;            }&#10;        ]&#10;    }&#10;]);&#10;&#10;function App() {&#10;    const [state, dispatch] = useReducer(todoReducer, initState)&#10;    return (&#10;        &lt;div&gt;&#10;            &lt;TodoContext.Provider value={{state, dispatch}}&gt;&#10;                &lt;RouterProvider router={routes}/&gt;&#10;            &lt;/TodoContext.Provider&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;export default App;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/reducers/TodoReducer.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/reducers/TodoReducer.js" />
              <option name="originalContent" value="export function todoReducer(state, action) {&#10;    switch (action.type) {&#10;        case &quot;ADD_TODO&quot;:&#10;            const newId = state.length &gt; 0 ? Math.max(...state.map(todo =&gt; todo.id)) + 1 : 1;&#10;            return [...state, {&#10;                id: newId,&#10;                text: action.payload.text,&#10;                done: false&#10;            }];&#10;        case &quot;TOGGLE_TODO&quot;:&#10;            /// copy&#10;            const newState = [...state];&#10;            const id = action.payload.id;&#10;            return newState.map((value) =&gt; {&#10;                if (value.id === id) {&#10;                    return {&#10;                        id,&#10;                        text: value.text,&#10;                        done: !value.done&#10;                    };&#10;                }&#10;&#10;                return value&#10;            })&#10;        case &quot;DELETE_TODO&quot;:&#10;            return state.filter(todo =&gt; todo.id !== action.payload.id);&#10;        default:&#10;            return state;&#10;    }&#10;}" />
              <option name="updatedContent" value="export function todoReducer(state, action) {&#10;    switch (action.type) {&#10;        case &quot;ADD_TODO&quot;:&#10;            const newId = state.length &gt; 0 ? Math.max(...state.map(todo =&gt; todo.id)) + 1 : 1;&#10;            return [...state, {&#10;                id: newId,&#10;                text: action.payload.text,&#10;                done: false&#10;            }];&#10;        case &quot;TOGGLE_TODO&quot;:&#10;            /// copy&#10;            const newState = [...state];&#10;            const id = action.payload.id;&#10;            return newState.map((value) =&gt; {&#10;                if (value.id === id) {&#10;                    return {&#10;                        id,&#10;                        text: value.text,&#10;                        done: !value.done&#10;                    };&#10;                }&#10;&#10;                return value&#10;            })&#10;        case &quot;DELETE_TODO&quot;:&#10;            return state.filter(todo =&gt; todo.id !== action.payload.id);&#10;        default:&#10;            return state;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>