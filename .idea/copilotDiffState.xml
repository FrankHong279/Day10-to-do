<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/reducers/TodoReducer.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/reducers/TodoReducer.js" />
              <option name="originalContent" value="export function todoReducer(state, action) {&#10;    switch (action.type) {&#10;        case &quot;ADD_TODO&quot;:&#10;            const newId = state.length &gt; 0 ? Math.max(...state.map(todo =&gt; todo.id)) + 1 : 1;&#10;            return [...state, {&#10;                id: newId,&#10;                text: action.payload.text,&#10;                done: false&#10;            }];&#10;        case &quot;TOGGLE_TODO&quot;:&#10;            /// copy&#10;            const newState = [...state];&#10;            const id = action.payload.id;&#10;            return newState.map((value) =&gt; {&#10;                if (value.id === id) {&#10;                    return {&#10;                        id,&#10;                        text: value.text,&#10;                        done: !value.done&#10;                    };&#10;                }&#10;&#10;                return value&#10;            })&#10;        case &quot;DELETE_TODO&quot;:&#10;            return state.filter(todo =&gt; todo.id !== action.payload.id);&#10;        default:&#10;            return state;&#10;    }&#10;}" />
              <option name="updatedContent" value="export function todoReducer(state, action) {&#10;    switch (action.type) {&#10;        case &quot;ADD_TODO&quot;:&#10;            const newId = state.length &gt; 0 ? Math.max(...state.map(todo =&gt; todo.id)) + 1 : 1;&#10;            return [...state, {&#10;                id: newId,&#10;                text: action.payload.text,&#10;                done: false&#10;            }];&#10;        case &quot;TOGGLE_TODO&quot;:&#10;            /// copy&#10;            const newState = [...state];&#10;            const id = action.payload.id;&#10;            return newState.map((value) =&gt; {&#10;                if (value.id === id) {&#10;                    return {&#10;                        id,&#10;                        text: value.text,&#10;                        done: !value.done&#10;                    };&#10;                }&#10;&#10;                return value&#10;            })&#10;        case &quot;DELETE_TODO&quot;:&#10;            return state.filter(todo =&gt; todo.id !== action.payload.id);&#10;        default:&#10;            return state;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>